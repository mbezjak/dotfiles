;;; mcp-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from mcp.el

(autoload 'mcp-connect-server "mcp" "\
Connect to an MCP server with NAME, COMMAND, and ARGS or URL.

NAME is a string representing the name of the server.
COMMAND is a string representing the command to start the server
in stdio mcp server.
ARGS is a list of arguments to pass to the COMMAND.
URL is a string arguments to connect sse mcp server.
ENV is a plist argument to set mcp server env.

INITIAL-CALLBACK is a function called when the server completes
the connection.
TOOLS-CALLBACK is a function called to handle the list of tools
provided by the server.
PROMPTS-CALLBACK is a function called to handle the list of prompts
provided by the server.
RESOURCES-CALLBACK is a function called to handle the list of
resources provided by the server.
RESOURCES-TEMPLATES-CALLBACK is a function called to handle the list of
resources-templates provided by the server.
ERROR-CALLBACK is a function to call on error.

This function creates a new process for the server, initializes a connection,
and sends an initialization message to the server. The connection is stored
in the `mcp-server-connections` hash table for future reference.

(fn NAME &key COMMAND ARGS URL ENV INITIAL-CALLBACK TOOLS-CALLBACK PROMPTS-CALLBACK RESOURCES-CALLBACK RESOURCES-TEMPLATES-CALLBACK ERROR-CALLBACK)")
(autoload 'mcp-stop-server "mcp" "\
Stop the MCP server with the given NAME.
If the server is running, it will be shutdown and its connection will be removed
from `mcp-server-connections'. If no server with the given NAME is found,
a message will be displayed indicating that the server is not running.

(fn NAME)")
(autoload 'mcp-make-text-tool "mcp" "\
Create a `gptel' tool with the given NAME, TOOL-NAME, and ASYNCP.

NAME is the name of the server connection.
TOOL-NAME is the name of the tool to be created.

Currently, only synchronous messages are supported.

This function retrieves the tool definition from the server connection,
constructs a basic tool with the appropriate properties, and returns it.
The tool is configured to handle input arguments, call the server, and process
the response to extract and return text content.

(fn NAME TOOL-NAME &optional ASYNCP)")
(register-definition-prefixes "mcp" '("mcp-"))


;;; Generated autoloads from mcp-hub.el

(autoload 'mcp-hub-get-all-tool "mcp-hub" "\
Retrieve all available tools from connected MCP servers.
This function collects all tools from currently connected MCP servers,
filtering out any invalid entries. Each tool is created as a text tool
that can be used for interaction.

When ASYNCP is non-nil, the tools will be created asynchronously.

When CATEGORYP is non-nil, the tools will be add to a category.

Returns a list of text tools created from all valid tools across all
connected servers. The list excludes any tools that couldn't be created
due to missing or invalid names.

Example:
  (mcp-hub-get-all-tool)  ; Get all tools synchronously
  (mcp-hub-get-all-tool t)  ; Get all tools asynchronously

(fn &key ASYNCP CATEGORYP)")
(autoload 'mcp-hub-start-all-server "mcp-hub" "\
Start all configured MCP servers.
This function will attempt to start each server listed in `mcp-hub-servers'
if it's not already running.

Optional argument CALLBACK is a function to be called when all servers have
either started successfully or failed to start.The callback receives no
arguments.

Optional argument SERVERS is a list of server names (strings) to filter which
servers should be started. When nil, all configured servers are considered.

(fn &optional CALLBACK SERVERS)" t)
(autoload 'mcp-hub-close-all-server "mcp-hub" "\
Stop all running MCP servers.
This function will attempt to stop each server listed in `mcp-hub-servers'
that is currently running." t)
(autoload 'mcp-hub-restart-all-server "mcp-hub" "\
Restart all configured MCP servers.
This function first stops all running servers, then starts them again.
It's useful for applying configuration changes or recovering from errors." t)
(autoload 'mcp-hub "mcp-hub" "\
View mcp hub server.
Start all server if START is non-nil or if called interactively with a prefix
argument.

(fn &optional START)" t)
(autoload 'mcp-hub-start-server "mcp-hub" "\
Start the currently selected MCP server.
This function starts the server that is currently highlighted in the *Mcp-Hub*
buffer. It sets up callbacks for connection status, tools, prompts, and
resources updates, and refreshes the hub view after starting the server." t)
(autoload 'mcp-hub-close-server "mcp-hub" "\
Stop the currently selected MCP server.
This function stops the server that is currently highlighted in the *Mcp-Hub*
buffer and updates the hub view to reflect the change in status." t)
(autoload 'mcp-hub-restart-server "mcp-hub" "\
Restart the currently selected MCP server.
This function stops and then starts the server that is currently highlighted
in the *Mcp-Hub* buffer. It's useful for applying configuration changes or
recovering from errors." t)
(autoload 'mcp-hub-view-log "mcp-hub" "\
View the event log for the currently selected MCP server.
This function opens a buffer showing the event log for the server that is
currently highlighted in the *Mcp-Hub* buffer." t)
(register-definition-prefixes "mcp-hub" '("mcp-hub-"))

;;; End of scraped data

(provide 'mcp-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; mcp-autoloads.el ends here
