#!/usr/bin/env groovy

// cmdline interface for http://www.samoborcek.hr/vozni-red
def smbToAkzAtWorkdayModA = '*4.10  *4,40  *5,05  *5,25  5,40  6,00  6,20  6,30  *6,35  6,50  7,05  7,30  7,45  8,10  *8,35  *8,55  *9,20  *9,45  *10,10  *10,35  *10,55  *11,20  *11,40  *12,05  12,40  13,10  13,30  13,55  14,15  14,45  15,15  15,35  *15,50  16,20  16,40  17,05  *17,20  18,00  18,20  18,40  *19,00  19,25  19,50  *20,10  *20,35  *21,00  *21,45  *22,15  *23,00'
def smbToAkzAtWorkdayModN = '*4,40  5,40  *6,35  7,30  *8,55  *9,45  *10,55  *12.05  12.40  13.55  *15.50  16,40 *17.20 18,00  18,40  19,50  *20,35  *21,45  *22,15'
def smbToAkzAtWorkdayModK = '*9,20  *11,40  14,15  *21,00'
def akzToSmbAtWorkdayModA = '*4,55  *5,40  6,00  6,15  6,30  6,50  7,10  7,25  7,40    7,50  8,00  *8,30  8,40  *9,10  *9,35  *9,55  *10,20  *10,45  *11,10  *11,35  *11,55  *12,20  12,40  13,10  *13,40  14,15  14,30  14,55  15,20  15,45  16,10  *16,30  17,00  17,20  17,40  *18,00  18,25  *18,50  19,15  *19,35  20,00  20,20  *20,50  *21,10  *21,30  *22,00  *22,35  *23,05  *23,45'
def akzToSmbAtWorkdayModN = '*4,55  *5,40  6,30  *8,30  *9,35  *10,20  *11,35  *12,20  13.10  13.40  14,15   14.55  16,30  17.20 *18,00  *18,50  *19,35  *20,50  *22,35  *23,05  *23.45'
def akzToSmbAtWorkdayModK = '7,40  *11,55  19,15 *21,30'

def source = [
    [ end      : 'akz',
      start    : 'smb',
      schedule : 'workday',
      variant  : 'all',
      times    : smbToAkzAtWorkdayModA ],
    [ end      : 'akz',
      start    : 'smb',
      schedule : 'workday',
      variant  : 'novaki',
      times    :  smbToAkzAtWorkdayModN ],
    [ end      : 'akz',
      start    : 'smb',
      schedule : 'workday',
      variant  : 'kerestinec',
      times    :  smbToAkzAtWorkdayModK ],
    [ end      : 'akz',
      start    : 'akz',
      schedule : 'workday',
      variant  : 'all',
      times    : akzToSmbAtWorkdayModA ],
    [ end      : 'akz',
      start    : 'akz',
      schedule : 'workday',
      variant  : 'novaki',
      times    : akzToSmbAtWorkdayModN ],
    [ end     : 'akz',
      start    : 'akz',
      schedule : 'workday',
      variant  : 'kerestinec',
      times    : akzToSmbAtWorkdayModK ]
]

class MapCategory {
    static Map collectValues(Map source, Closure f) {
        source.collectEntries { key, value -> [key, f(value)] }
    }
}

def normalizeTime(timeString) {
    def t = timeString.replaceAll(/\./, ',')
    t.length() <= 4 ? '0'+t : t
}
def parseTime(timeString) {
    [ time : normalizeTime(timeString - '*'), star : timeString.startsWith('*') ]
}
def parseTimes (times) {
    times.tokenize(' ').collect { parseTime(it) }
}

def source2model(source) {
    use(MapCategory) {
        def groups = source.groupBy([{ it.end }, { it.start }, { it.schedule }, { it.variant }])
        groups.collectValues { starts ->
            starts.collectValues { schedules ->
                schedules.collectValues { variants ->
                    def all = parseTimes(variants.all.first().times)
                    def novaki = parseTimes(variants.novaki.first().times)
                    def kerestinec = parseTimes(variants.kerestinec.first().times)

                    all.collect { timeMap ->
                        timeMap + [ novaki : timeMap in novaki, kerestinec : timeMap in kerestinec ]
                    }
                }
            }
        }
    }
}

def prettyPrintTime = { timeMap ->
    def modifier = (timeMap.novaki ? 'N' : '') +
                   (timeMap.kerestinec ? 'K' : '') +
                   (timeMap.star ? '*' : '')

    timeMap.time + (modifier ? " $modifier" : '')
}

def model = source2model(source)
def now = new Date().format('HH,mm')

def from = args.any { it == '--from-home' } ? 'smb' : 'akz'
def absolute = args.any { it == '--absolute' }

def lineTimes = model.akz."$from".workday
if (!absolute) {
    lineTimes = lineTimes.findAll { it.time > now }
}

println from == 'akz' ? 'akz->smb' : 'smb->akz'
println lineTimes.collect { prettyPrintTime(it) }.join('\n')
