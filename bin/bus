#!/usr/bin/env groovy

/*
 * Command line interface for http://www.samoborcek.hr/vozni-red
 */

def fromWeb = [
    'smb->akz @workday #all' : '*4.10  *4,40  *5,05  *5,25  5,40  6,00  6,20  6,30  *6,35  6,50  7,05  7,30  7,45  8,10  *8,35  *8,55  *9,20  *9,45  *10,10  *10,35  *10,55  *11,20  *11,40  *12,05  12,40  13,10  13,30  13,55  14,15  14,45  15,15  15,35  *15,50  16,20  16,40  17,05  *17,20  18,00  18,20  18,40  *19,00  19,25  19,50  *20,10  *20,35  *21,00  *21,45  *22,15  *23,00',
    'smb->akz @workday #novaki' : '*4,40  5,40  *6,35  7,30  *8,55  *9,45  *10,55  *12.05  12.40  13.55  *15.50  16,40 *17.20 18,00  18,40  19,50  *20,35  *21,45  *22,15',
    'smb->akz @workday #kerestinec' : '*9,20  *11,40  14,15  *21,00',

    'smb->akz @saturday #all' : '** 0.15  **3.15  4.10  4.50  5.10  5.40  6.00  6.40  7.00  7.20  7.45  8.15  8.40  9.10  9.45  10.15  10.40  11.10  11.45  12.15  12.35  12.50  13.05  13.40  14.15  14.35  15.05  15.30  16.00  16.30  17.00  17.30  18.00  18.30  19.00  19.30  20.00  20.50  21.30  22.15  23.00',
    'smb->akz @saturday #novaki' : '4.10  5.10  6.00  6.40  7.45  8.40  9.45  10.15  11.45  12.50  14.15 15.05 16.00  18.00  19.00  20.50  22.15',
    'smb->akz @saturday #kerestinec' : '7.00  9.10  11.10  14.35  15.30  17.00  20.00  21.30  23.00',

    'smb->akz @sunday #all' : '** 0.15  **3.15  4.40  5.10  6.00  6.30  7.00  7.30  8.00  8.30  9.00  9.30  10.00  10.30  11.00  11.30  12.00  12.30  13.00  13.30  14.00  14.30  15.00  15.30  16.00  16.30  17.00  17.30  18.00  18.30  19.00  19.30  20.00  20.30  21.00  21.30  22.10  23.00',
    'smb->akz @sunday #novaki' : '4.40  6.00  7.00  8.00  9.30  11.00  12.30  13.30  14.30  16.00  17.00  18.00  19.00  21.00  23.00',
    'smb->akz @sunday #kerestinec' : '5.10  6.30  12.00  20.30  22.10',

    'akz->smb @workday #all' : '*4,55  *5,40  6,00  6,15  6,30  6,50  7,10  7,25  7,40    7,50  8,00  *8,30  8,40  *9,10  *9,35  *9,55  *10,20  *10,45  *11,10  *11,35  *11,55  *12,20  12,40  13,10  *13,40  14,15  14,30  14,55  15,20  15,45  16,10  *16,30  17,00  17,20  17,40  *18,00  18,25  *18,50  19,15  *19,35  20,00  20,20  *20,50  *21,10  *21,30  *22,00  *22,35  *23,05  *23,45',
    'akz->smb @workday #novaki' : '*4,55  *5,40  6,30  *8,30  *9,35  *10,20  *11,35  *12,20  13.10  13.40  14,15   14.55  16,30  17.20 *18,00  *18,50  *19,35  *20,50  *22,35  *23,05  *23.45',
    'akz->smb @workday #kerestinec' : '7,40  *11,55  19,15 *21,30',

    'akz->smb @saturday #all' : '**0.35  **3.35  5.00  5.40  6.00  6.30  7.00  7.40  8.00  8.20  8.45  9.15  9.40  10.10  10.45  11.15  11.40  12.05  12.40  13.15  13.35  13.50  14.05  14.30  15.05  15.35  16.05  16.30  17.00  17.30  18.00  18.30  19.00  19.30  20.00  20.30  21.00  21.45  22.20  23.05  23.45',
    'akz->smb @saturday #novaki' : '6.00  7.40  9.15  10.45  11.15  11.40  12.40  13.35    14.30  15.05  17.00  18.30  20.00  21.00  23.45',
    'akz->smb @saturday #kerestinec' : '6.30  8.00  10.10  12.05  15.35  16.30  18.00  19.30       20.30  22.20',

    'akz->smb @sunday #all' : '**0.35  **3.35  5.25  6.00  7.00  7.30  8.00  8.30  9.00  9.30  10.00  10.30  11.00  11.30  12.00  12.30  13.00  13.30  14.00  14.30  15.00  15.30  16.00  16.30  17.00  17.30  18.00  18.30  19.00  19.30  20.00  20.30  21.00  21.30  22.00  22.30  23.00  23.45',
    'akz->smb @sunday #novaki' : '6.00  7.30  9.00  10.30  12.00  13.00  14.30  16.00  17.30  18.30  19.30  20.30  22.00  23.45',
    'akz->smb @sunday #kerestinec' : '7.00  8.00  10.00  16.30  21.30  23.00'
]

def parse = { String spec ->
    def matcher = spec =~ /^(\w+)->(\w+) @(\w+) #(\w+).*$/
    def (fullMatch, src, dst, schedule, variant) = matcher[0]
    [ src:src, dst:dst, schedule:schedule, variant:variant ]
}
def parseLine = { String line ->
    def matcher = line =~ /^(\w+)-(\w+)$/
    def (fullMatch, src, dst) = matcher[0]
    [ src:src, dst:dst ]
}

def source = fromWeb.collect { spec, times ->
    parse(spec) + [times:times]
}

class MapCategory {
    static Map collectValues(Map input, Closure f) {
        input.collectEntries { key, value -> [key, f(value)] }
    }
}

def normalizeTime(timeString) {
    def t = timeString.replaceAll(/\./, ',')
    t.length() <= 4 ? '0'+t : t
}
def parseTime(timeString) {
    [ time : normalizeTime(timeString - '**' - '*'), star : timeString.startsWith('*') ]
}
def parseTimes (times) {
    times.tokenize(' ').collect { parseTime(it) }
}

def source2model(source) {
    use(MapCategory) {
        def groups = source.groupBy([{ it.src }, { it.dst }, { it.schedule }, { it.variant }])
        groups.collectValues { srcs ->
            srcs.collectValues { schedules ->
                schedules.collectValues { variants ->
                    def all = parseTimes(variants.all.first().times)
                    def novaki = parseTimes(variants.novaki.first().times)
                    def kerestinec = parseTimes(variants.kerestinec.first().times)

                    all.collect { timeMap ->
                        timeMap + [ novaki : timeMap in novaki, kerestinec : timeMap in kerestinec ]
                    }
                }
            }
        }
    }
}

def dayOfWeekForToday = {
    def day = new Date()[Calendar.DAY_OF_WEEK]
    if (day == Calendar.SATURDAY) 'saturday'
    else if (day == Calendar.SUNDAY) 'sunday'
    else 'workday'
}
def prettyPrintTime = { timeMap ->
    def modifier = (timeMap.novaki ? 'N' : '') +
                   (timeMap.kerestinec ? 'K' : '') +
                   (timeMap.star ? '*' : '')

    timeMap.time + (modifier ? " $modifier" : '')
}
def prettyLine = { line ->
    "${line.src}->${line.dst}" as String
}

def findArg = { name -> args.find { it == name } }
def hasArg = { name -> !!findArg(name) }
def option = { name -> hasArg('--' + name) ? name : null }

def absolute = hasArg('--absolute')
def schedule = option('workday') ?: option('saturday') ?: option('sunday') ?: dayOfWeekForToday()
def line = parseLine(option('smb-akz') ?: 'akz-smb')

def model = source2model(source)
def now = new Date().format('HH,mm')

def lineTimes = model[line.src][line.dst][schedule]
if (!absolute) {
    lineTimes = lineTimes.findAll { it.time > now }
}

println "${prettyLine(line)} @$schedule"
println lineTimes.collect { prettyPrintTime(it) }.join('\n')
