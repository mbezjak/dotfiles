#!/bin/bash
#

set -o errexit

[[ -d .git ]] && cmd=git || cmd=hg
project=$(basename "$PWD")


### helper functions ###
color_green()  { tput setaf 2; }
color_orange() { tput setaf 3; }
color_red()    { tput setaf 1; }
color_reset()  { tput sgr0;    }

git_count_dirty()  { git status --short | wc -l; }
git_inout() { git log --oneline --reverse "$1" 2> /dev/null; }
git_incoming()     { git_inout master..origin/master; }
git_outgoing()     { git_inout origin/master..master; }
git_fast_forward() { git merge --quiet --ff-only origin/master; }

hg_count_dirty()   { hg status | wc -l; }
hg_inout()  { hg --quiet "$1" --template '{author|person} {desc|firstline}\n' 2> /dev/null; }
hg_incoming()      { hg_inout incoming; }
hg_outgoing()      { hg_inout outgoing; }
hg_fast_forward()  { hg --quiet pull --update; }

### DSL functions ###
fetch()          { [[ $cmd == git ]] && git fetch --quiet --all || return 0; }
count_dirty()    { ${cmd}_count_dirty;  }
incoming()       { ${cmd}_incoming;     }
outgoing()       { ${cmd}_outgoing;     }
count_incoming() { incoming | wc -l;    }
count_outgoing() { outgoing | wc -l;    }
fast_forward()   { ${cmd}_fast_forward; }
echo_incoming()  { incoming | awk -vp="  $project " '{print p $0}'; }
echo_state()     { [[ "$2" -ne 0 ]] && echo "$project $1 $2" || return 0; }

echoc_incoming() { color_green  ; echo_incoming       ; color_reset; }
echoc_in()       { color_green  ; echo_state in    $1 ; color_reset; }
echoc_out()      { color_red    ; echo_state out   $1 ; color_reset; }
echoc_dirty()    { color_orange ; echo_state dirty $1 ; color_reset; }


fetch
dirty=$(count_dirty)
cin=$(count_incoming)
cout=$(count_outgoing)

[[ "$dirty" -eq 0 && "$cout" -eq 0 && "cin" -ne 0 ]] && {
  echoc_incoming
  fast_forward
}

# special rules for some projects
[[ "$project" == .metadata || "$project" == notes ]] && dirty=0


echoc_dirty $dirty
echoc_in    $cin
echoc_out   $cout

exit 0
